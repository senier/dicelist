#!/usr/bin/env python3

import argparse
import random
import re
import sys

from pathlib import Path

import numpy as np
import jellyfish


def dice(value: int, num: int, pos: int = 0) -> str:
    if value == 0:
        return (num - pos) * "1"
    return dice(value // 6, num, pos + 1) + f"{value % 6 + 1}"


class Words:
    def __init__(
        self,
        filename: Path,
        num_dice: int,
        count_thresh: int,
        len_min: int,
        len_max: int,
        stale_thresh: int,
    ):
        self._num_dice = num_dice
        self._stale_thresh = stale_thresh

        with filename.open() as infile:
            self._all_words = [
                (word, count)
                for line in infile.readlines()
                for _, word, count_str in [line.strip().split("\t")]
                if (
                    (count := int(count_str)) > count_thresh
                    and len(word) >= len_min
                    and len(word) <= len_max
                    and re.match(r"^[^\W\d_]+$", word)
                )
            ]
        random.shuffle(self._all_words)

    @property
    def _word_len(self) -> int:
        return len(self._all_words)

    @property
    def _num_words(self) -> int:
        return 6**self._num_dice

    def _optimize(self) -> list[str]:
        result = []
        stale = 0
        score = None

        similarity = np.empty((self._word_len + 1) ** 2).reshape(
            self._word_len + 1, self._word_len + 1
        )
        for i in range(1, self._word_len):
            similarity[0, i] = i
            similarity[i, 0] = i

        for li in range(0, self._word_len):
            for ri in range(0, self._word_len):
                if li < ri:
                    similarity[li + 1, ri + 1] = jellyfish.jaro_winkler_similarity(
                        self._all_words[li][0], self._all_words[ri][0]
                    )
            if li % 100 == 99:
                print(
                    f"Calculating similarity: {100*li/len(self._all_words):2.2f}%",
                    file=sys.stderr,
                )

        while stale < self._stale_thresh:
            inner = random.randint(1, self._num_words)
            outer = random.randint(self._num_words, len(self._all_words))
            similarity[:, [inner, outer]] = similarity[:, [outer, inner]]
            similarity[[inner, outer], :] = similarity[[outer, inner], :]
            temp = np.sum(similarity[1 : self._num_words + 1, 1 : self._num_words + 1])
            if score and temp > score + 0.0001:
                stale += 1
                similarity[[outer, inner], :] = similarity[[inner, outer], :]
                similarity[:, [outer, inner]] = similarity[:, [inner, outer]]
                continue
            stale = 0
            score = temp
            print(f"Optimizing: {score:.1f}")

        result = list(
            self._all_words[int(index)][0]
            for index in similarity[0, 1 : self._num_words + 1]
        )
        random.shuffle(result)
        return result

    def write(self, filename: Path) -> None:
        words = self._optimize()
        with filename.open("w+") as outfile:
            for i in range(0, self._num_words):
                print(f"{dice(i, self._num_dice)} {words[i]}", file=outfile)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--infile", type=Path, required=True, help="Corpora file")
    parser.add_argument(
        "-o", "--outfile", type=Path, required=True, help="Output wordlist file"
    )
    parser.add_argument(
        "-n",
        "--num-dice",
        type=int,
        default=5,
        help="Number of dice (default: %(default)d)",
    )
    parser.add_argument(
        "-c",
        "--count-thresh",
        type=int,
        default=50,
        help="Disregard words with fewer occurences (default: %(default)d)",
    )
    parser.add_argument(
        "-l",
        "--len-min",
        type=int,
        default=5,
        help="Minimum word length (default: %(default)d)",
    )
    parser.add_argument(
        "-u",
        "--len-max",
        type=int,
        default=14,
        help="Maximum word length (default: %(default)d)",
    )
    parser.add_argument(
        "-s",
        "--stale-thresh",
        type=int,
        default=100,
        help="Number of optimizations after which solution is considered stale (default: %(default)d)",
    )
    arguments = parser.parse_args()

    Words(
        arguments.infile,
        num_dice=arguments.num_dice,
        count_thresh=arguments.count_thresh,
        len_max=arguments.len_max,
        len_min=arguments.len_min,
        stale_thresh=arguments.stale_thresh,
    ).write(arguments.outfile)
