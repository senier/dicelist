#!/usr/bin/env python3

from __future__ import annotations

import argparse
import logging
from pathlib import Path

import dl

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--infile", type=Path, required=True, help="Corpora file")
    parser.add_argument(
        "-o",
        "--outfile",
        type=Path,
        required=True,
        help="Output wordlist file",
    )
    parser.add_argument(
        "-n",
        "--num-dice",
        type=int,
        default=5,
        help="Number of dice (default: %(default)d)",
    )
    parser.add_argument(
        "-c",
        "--count-thresh",
        type=int,
        default=50,
        help="Disregard words with fewer occurences (default: %(default)d)",
    )
    parser.add_argument(
        "-l",
        "--len-min",
        type=int,
        default=3,
        help="Minimum word length (default: %(default)d)",
    )
    parser.add_argument(
        "-u",
        "--len-max",
        type=int,
        default=15,
        help="Maximum word length (default: %(default)d)",
    )
    parser.add_argument(
        "-s",
        "--stale-thresh",
        type=int,
        default=100,
        help=(
            "Number of optimizations after which solution"
            " is considered stale (default: %(default)d)"
        ),
    )
    parser.add_argument(
        "-S",
        "--step-thresh",
        type=int,
        default=10000,
        help=("Maximum number of optimizations steps to perfom (default: %(default)d)"),
    )
    arguments = parser.parse_args()

    logging.basicConfig(format="[%(asctime)s] %(message)s", level=logging.INFO)

    words = dl.Words(
        arguments.infile,
        num_dice=arguments.num_dice,
        count_thresh=arguments.count_thresh,
        len_max=arguments.len_max,
        len_min=arguments.len_min,
        stale_thresh=arguments.stale_thresh,
        step_thresh=arguments.step_thresh,
    )
    words.optimize(arguments.outfile)
    words.write(arguments.outfile)
